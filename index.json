[{"authors":null,"categories":null,"content":"I am senior undergraduate at the Indian Institute of Technology (BHU), Varanasi persuing Electrical Engineering. My interests encompasses but not limited to Representation learning and Intepretable AI. My research work has been in developing systems and agents which benefit or rely on these algorithms.\nI have joined John Dolan\u0026rsquo;s Argo AI Lab at Robotics Institute, Carnegie Mellon University working on Safe Autonomous Navigation.\nActively working under Dr. Shishir Kolathaya, IISc, bangalore at Stochlab on Different Reinforcement Learning Algorithm for Quadrupeds.\nPrevisously I worked under Dr. Pratik Chattopadhyay developing Generative Adverserial Networks to generate occluded pose in the whole Gait Cycle of a human subject.\nBesides Floating point values I like strings on my guitar to play a few tunes.\n  Download my resum√©.\n","date":1656633600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1656633600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am senior undergraduate at the Indian Institute of Technology (BHU), Varanasi persuing Electrical Engineering. My interests encompasses but not limited to Representation learning and Intepretable AI. My research work has been in developing systems and agents which benefit or rely on these algorithms.","tags":null,"title":"Somnath Kumar","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://hex-plex.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Aditya Shirwatkar","Somnath Kumar","Bharadwaj Amrutur","Shalabh Bhatnagar","Ashitava Ghosal","Shamrao","Vinod Kumar","Shishir Kolathaya"],"categories":null,"content":"","date":1656633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"c0117aefea133235d33c2a7358d7da80","permalink":"https://hex-plex.github.io/publication/exploration/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/exploration/","section":"publication","summary":"Until now, planetary exploration has been accomplished with wheeled vehicles, which makes movement in highly complex, sandy, and sloping terrain incredibly tough. On the other hand, legged robots have come a long way in the last decade and have reached a stage of development where practical applications appear to be possible.  Legged robots can overcome the difficulties wheeled vehicles face when exploring harsh environments like impact craters to collect critical scientific data. As a result, there is a need to develop simple, stable walking controllers given the limited power resources and reserve maximum onboard compute for scientific equipment while exploring such regions. This work proposes a walking controller for legged robots that is computationally efficient at runtime for traversing planetary terrains. We realize this walking controller on our quadruped Stochlite, using learned linear feedback policies that modulate the end-foot trajectories. The proposed walking controller can traverse on various planetary terrains such as flat, sloped, rugged, loose, and lower-than-Earth gravity conditions in simulation environments. Our controller outperforms the baseline open-loop controller on such planetary terrains by reducing the slippage and increasing the stability. In addition, we have also provided preliminary hardware testing results of our controller.","tags":[],"title":"Realizing Linear Controllers for Quadruped Robots on Planetary Terrains","type":"publication"},{"authors":["Somnath Kumar","Pavan Kulkarni","Yuvaraj Govindarajulu"],"categories":null,"content":"","date":1656633600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656633600,"objectID":"be504424762133718fdb74dcb24e9b86","permalink":"https://hex-plex.github.io/publication/vidmodex/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/vidmodex/","section":"publication","summary":"Current model extraction attacks have a generator or a synthetic dataset with the objective of maximizing the disagreement between the victim and replica model, in these techniques the generators have very limited success in learning representations for higher dimensional datasets. Another set of algorithms levers a proxy dataset to train a generator to have a similar data distribution, these approaches work only if the dataset is a superset or closely related to the target dataset. Hence making these approaches limited in terms of the domains of the model that can be attacked as well as the higher computational time required for training an additional discriminator. In the current work, we propose a simple generator with the standard objective of maximizing the disagreement between the outputs of the victim and the replica model, with an additional loss for improving visual features of the generated samples using a gram matrix as the objective computed against samples of a hyper class from a proxy dataset which is correlates to the target class of the victim. This assignment of a hyper class is done using Kmeans clustering of the word embedding of the target dataset classes and the proxy dataset classes, this helps in the efficient usage of the proxy dataset while generalizing the approach for different target datasets. In the paper, we show the success of the technique with experiments carried out on the victim model as Movie-Net-A6 (Video Action Classifier) trained and a proxy dataset of Image Net (Image classification) supporting the argument of enhancing the extraction of the model from a cross-modal dataset. We are the first to demonstrate the scalability of the extraction algorithm on Video Classification for datasets with 600 classes. The proposed approach achieves the highest extraction results on video classification models trained on Kinetics-600, Charades, and UCF101 with a reasonable query complexity of 35M, 20M, and 15M respectively.","tags":[],"title":"VidModEx: Black Box Model Extraction for Video Classification models with Efficient Query Samples","type":"publication"},{"authors":null,"categories":null,"content":"Please go through the slides linked above or watch through our presentation below.\n End to End Approach Installation $ pip install vidmodex ## Stable version $ pip install git+https://github.com/hex-plex/Model-Extraction-Attacks-Video-Classification ## Latest development  Usage Simple snippet explaining the usage :\nBlackBox Extraction # Black Box Victim: SwinT, Student: ViViT, Generator: Tgan from vidmodex.models import ViViT as Student from vidmodex.models import SwinT as Victim from vidmodex.generator import Tgan as Generator custom_config = {} custom_config[\u0026quot;num_classes\u0026quot;] = 400 blackbox_main(custom_config)  GreyBox Extraction # Grey Box Victim: SwinT, Student: ViViT, Generator: Tgan, Dataset: Kinetics 400 from vidmodex.models import ViViT as Student from vidmodex.models import SwinT as Victim from vidmodex.generator import Tgan as Generator custom_config = {} custom_config[\u0026quot;csv_file\u0026quot;] = \u0026quot;ENTER-THE-LOCATION-OF-DATA-CSV\u0026quot; custom_config[\u0026quot;root_dir\u0026quot;] = \u0026quot;ENTER-THE-LOCATION-OF-DATA-ROOT\u0026quot; custom_config[\u0026quot;ucf_gan_weights\u0026quot;] = \u0026quot;ENTER-THE-LOCATION-OF-UCF-WEIGHTS\u0026quot; or \u0026quot;state_normal81000.ckpt\u0026quot; custom_config[\u0026quot;num_classes\u0026quot;] = 400 greybox_main(custom_config)  References [1] ViViT: A Video Vision Transformer [https://arxiv.org/abs/2103.15691] [cs.CV] 1 Nov 2021\n[2] MoViNets: Mobile Video Networks for Efficient Video Recognition [https://arxiv.org/abs/2103.11511] [cs.CV] 18 Apr 2021\n[3] Swin Transformer: Hierarchical Vision Transformer using Shifted Windows [https://arxiv.org/abs/2103.14030] [cs.CV] 17 Aug 2021\n[4] Temporal Generative Adversarial Nets with Singular Value Clipping [https://arxiv.org/abs/1611.06624] [cs.LG] 18 Aug 2017\n[5] Data-Free Model Extraction [https://arxiv.org/abs/2011.14779] [cs.LG] 31 Mar 2021\n[6] MAZE: Data-Free Model Stealing Attack Using Zeroth-Order Gradient Estimation [https://arxiv.org/abs/2005.03161] [stat.ML] 6 May 2020\n[7] Robustness and Diversity Seeking Data-Free Knowledge Distillation [https://arxiv.org/abs/2011.03749] [cs.LG] 10 Feb 2021\n","date":1646265600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646265600,"objectID":"daf6ab8f0573501ff46318a96283c5a6","permalink":"https://hex-plex.github.io/project/model-extraction/","publishdate":"2022-03-03T00:00:00Z","relpermalink":"/project/model-extraction/","section":"project","summary":"Extraction of Model using Black box queries, from limited or no original data.","tags":["Model Extraction","Deep Learning","Computer Vision"],"title":"Black Box Model Extraction","type":"project"},{"authors":null,"categories":null,"content":"This is an implementation of Communication in MARL using Graph Neural Network. This is been trained and tested on StarCraft II, And this has shown improved training and performance metrics throughout all the maps. I have implemented this on top of PyMARL for easier comparative study with respect to other algorithms or implementations like ePyMARL.\nCurrently we have the following algorithms for training.\n QMIX: QMIX: Monotonic Value Function Factorisation for Deep Multi-Agent Reinforcement Learning COMA: Counterfactual Multi-Agent Policy Gradients VDN: Value-Decomposition Networks For Cooperative Multi-Agent Learning IQL: Independent Q-Learning QTRAN: QTRAN: Learning to Factorize with Transformation for Cooperative Multi-Agent Reinforcement Learning  For communication we have used to different Architecures\n GConv: Graph Convolutional Network GAT: Graph Attention Network  Graph Neural Network. More Information about the architecture and the execution can be found at MultiAgent GNN A brief outline would be as follows\nPipeline for communication using Graph Neural Network The implementation is written in PyTorch and uses a modified version of SMAC which could be found in smac-py to include the adjacency matrix as the observation more detail on it can be found here.\nFor a glimpse of the algorithm in action checkout the Output section\nAdjacency Matrix An adjacency matrix simply represents the vertices of the graph. For the current problem we have used a few heuristics for joining two nodes with a vertex. They are as below\n Communication distance : - Even though their is no restriction in communication having local communication improves cooperation in shared tasks Unit Type : - Many task benefit from similar units perfoming certain part of the task than other other units cooperating with each other.  Output This is a demo output from the policy whose stats are given above Results Below are the training and test metric of the presented algorithm with QMIX on map 2s3z. The study is limited to the number of experiments due to limitation in computation at the disposal. The presented algorithm does support parallel envs and boosting the process of training. This would be tested soon\n   Train \u0026ndash;     Battle win percentage Average Return           Test \u0026ndash;     Battle win percentage Average Return        ","date":1638662400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638662400,"objectID":"f5df24e5af6e2f2367aea4c5fd8f76d3","permalink":"https://hex-plex.github.io/project/gnn-marl/","publishdate":"2021-12-05T00:00:00Z","relpermalink":"/project/gnn-marl/","section":"project","summary":"Enabling communication in MultiAgent Reinforcement Learning using Graph.","tags":["MultiAgent","Graph Neural Network","Reinforcement Learning","StarCraft II"],"title":"Graph Neural Network for Communication in MARL","type":"project"},{"authors":null,"categories":null,"content":"The main objective of this project was to make and efficient multi-agent algorithm for cleaning an unknown terrain, for which we built \u0026ldquo;Vox-Bot\u0026rdquo; a ROS package for multi robot platform, A full description about VoxBot can be found here Description. This is our solution submitted for AIITRA robotics challenge 2021, where we secured second position among all other IIT s and prestigious colleges of India.\nDescription An CAD design of the the Vox-Bot Vox Bot is an 4 wheeled robot with omni wheels for maximum agility and mobility. The main purpose of the robot is to vacumm cleaner autonomously in unknown terrain. It houses a lidar for mapping and a SBC for all computational needs, with one high power brushless motor for vacumm generation and 4 brushed motors for exhausts.\nFor the Vacumm system we have done multiple studies for the airflow which can be found here Airflow.\nBelow we explain our solution for the Problem statement\nPipeline We have modified the Vanilla navigation stack offered in move base ROS. We have used movebase flex for implementing the below architecture of below navigation stack.\nComplete Pipeline of our solution we have used multirobot_map_merge with rrt exploration for mapping the environment.\nWe have used polygon_planner for planning the boustrophedon path.\nThe rest is custom implemented with fortuners algorithm used for computing voronoi diagram. More detail can be found in our proposal PDF.\nBelow are a brief result that is not present in the proposal\nMapping We have use RRT exploration instead of simple frontier exploration which made it very efficient\nComparision of number of bots and time to explore Optimal coverage we have used voronoi diagram and weighted centroid algorithm for distributing the task between individual robots, more detail about it can be found in the Proposal.\nGenerating voronoi diagram using Fortners algorithm\nWe then iterate using weighted center algorithm for calculating the desired voronoi cells and the positions of each agent.\nWeighted center Algorithm Gives a result as such\nRobots computing the path and optimal voronoi cell Boustrophoedn path Path distribution for arena 1  Path distribution for arean 2 Generating boustrophoden path for the polygon given by the voronoi diagram the robot resides on.\nAirflow study The vacuum of the bot works on the principle of the lower fan creating pressure difference to suck in air while the exhaust pushes out the air from the above compartment for efficient vacuum generation.\nThe fan has been placed low for efficient cleaning, with a ground clearance measuring approximately less than half of the wheel radius.\nAnalysis of the vacuum mechanism was done using the SolidWorks Flow Simulation tool to get outputs about the kind of behavior shown by our vacuum during actual implementation.\nThe simulation required us to cover our rotating regions with circular bounded bodies to define the rotation boundary. We also defined the inlet and the outlet velocities as 0.6m/s and 0.15m/s below the bot and at the exhausts respectively. As the simulation was an internal one, the image only shows the flow inside our bot but the fact is quite evident through the trajectory of the arrows that in real-world scenarios, vox would certainly be an efficient vacuum design.\nHypothetical system of the Robot for full suction power  The zoomed-in image of the flow clearly depicts that our exhausts are also working efficiently during closed space tests as the simulation required us to close the lower open space of our bot with a lid. The fans are generating the expected and the required flows quite efficiently.\nAirflow inside the central chamber Team  Somnath Sendhil Kumar \n Varad Vinayak pandey\n Gujulla Leel Srini Rohan\n Utkrisht Singh\n Aryaman Gupta\n  ","date":1637020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1637020800,"objectID":"68962ec400515d29cd0516ca3e87fc1b","permalink":"https://hex-plex.github.io/project/multi-agent-coverage/","publishdate":"2021-11-16T00:00:00Z","relpermalink":"/project/multi-agent-coverage/","section":"project","summary":"efficient coverage using multiple agents in unknown terrain","tags":["Computer Vision","ROS","3D Modelling","MultiAgent","Robotics"],"title":"MultiAgent Full coverage","type":"project"},{"authors":null,"categories":null,"content":"Modding the hardware platform With a simple a simple RC drone with modified BetaFlight Firmware to allow mavlink communication and a external companion PC such as Banana pi zero m2 we plan to deploy swarm of these drones in to real world problems.\nOur Major targets were,\n Visual odometry Optimal Controller for tracing trajectory Trajectory optimization for multi agent systems.  We have been able to answer 2 of the above.\nVisual odometry We have been able to modify the Viso2ROS to run with a less number of feature points and with reduced map foot print for easier localization with help of few apriltags, for global coordinates and not using the whole map. We also to utilize the MALI GPU of the onboard computer compiled opencv with OpenCL to get a slightly better performance in the framerate of the localization. There is not much more novelty introduced from our end.\nOptimal controller - RL Aided MPC With limited computation, running an onboard MPC with non-linear Dynamics will fail to provide responsive control. Another Famous approach is RL-based controllers, where the feedback is a learned approximation of an expert demonstration from something like an MPC. But these policies are many layers deep and make it difficult to run in constrained hardware. Shallower policies tend to approximate the dynamics a lot and learn a sub-optimal policy that fails to work in many scenarios that are not desirable in multi-agent systems.\nHence I propose use of a small RL policies output as the hot solution to the MPC. Conceptually its a very simple task but this requires a responsive pipeline for being able to execute at a desired Rate. Below is our pipeline in Simulation and in Hardware.\nI have used the gym-pybullet-drones, as the base environment for our drone. We have imported our designs into the environment, Along with parameters for the drone like Air Drag coefficients.\nFor the MPC I have used the mpc.pytorch library from locuslab. As this uses pytorch backend for computation and optimization. This increased the efficiency and drastically decreased train time from 2 hrs to 45 mins.\nFor the training I implemented a simple 3 layer deep policy implemented using Pytorch and I used simple Policy Gradient algorithm, I trained using Ray Library with multiple workers while extending the dimension of the control of the MPC for optimizing the Training Loop.\nWe have tried using both the linear and the non-linear dynamics of the MPC, we resorted on using the linear dynamics along with RL for better deployment keeping the hardware limitation in mind\nReward We have used a simple curriculum of running the RL based estimations of the optimal force values for each properllers. As a low level PID controller is running for maintaining the altitude altitude, our main goal was to learn the force value estimation directly from a expert policy like the mpc, and later we could work on how the RL algorithm would optimize hot solutions than estimating better optimal control inputs. This is a key difference as here it would not have to model higher non-linearity of the horizon while optimizing the hot solution to the MPC.\nLater in the curriculum we add and extra term for decreasing the number of iterations taken to converge by an MPC. This reward is given from the MPC node and is just taken along side the state reward given from the environment.\nHence our net Reward is as follows\n\nResults After training for 8000 episodes we reach a decent point with high enough reward and good amount of speculation to use our Policy with current Architecture. Below is the demonstration of the robot trying to trace a figure 8 using the current Control architecture.\ntracing the figure 8 while running at 70 Hz As it can be seen this is able to trace the given trajectory. Below is the example of the Optimization the MPC provides over the RL Estimations\nPolicy Estimations for significant angles of Rolls and Pitches MPC based optimization reducing the Unsafe values of the Thrusts for smoother long horizon performance A more analytic study shows the improvement in performance by the need of steps to converge the optimization and the rate of diverge or failure in optimizing the policy within the limit.\nFor feasible run time of the MPC we use a threshold of optimal 5 iterations and maximum of 10 iterations would allow use to run the Pipeline on our desired system. Here we are optimizing the trajectories within a certain amount of cost which are experimented for suiting both performance and efficiency.\nAs can be seen from the curve performance of Pipeline increases continuing to train it further hence a proportional correlation confirms the proof of concept.\nThe second metrics we are using the rate of failures in either not being able to find a solution or not converging before the 10 iterations threshold, as we have used the approximated linear dynamics of the Drone we are entitled to diverge in prediction of the future states and hence give an sub optimal response, We see this is also improved with the current architecture and is able to robustly work in a bigger configuration space.\nGiven the improvement of the performance against only MPC based control makes it a very good fit for our application. Currently hardware code structured would have to finalized as we would have to make utilize most of all the onboard computation for both the RL policy forward propagation and the MPC optimization. Hence we are working on modifing Mav_Control_RW for our needs to use a betaflight firmware as the lowlevel controller and communicated through MavLink.\nFuture works We are currently working on implementing the hardware pipline for feasible hardware results. And constantly estimating optimal parameters to run the pipe line with.\nAs Specified in the start of the post we are also trying to solve the problem of trajectory optimization of Multi-Agent systems for which we would be more than happy to collaborate or hear from you.\n","date":1633046400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633046400,"objectID":"6bfaadc3a4f6775f83ae49b87f2c6899","permalink":"https://hex-plex.github.io/project/nanodrone-rlampc/","publishdate":"2021-10-01T00:00:00Z","relpermalink":"/project/nanodrone-rlampc/","section":"project","summary":"Reinforcement Learning aided MPC for constrained systems","tags":["Reinforcement Learning","Optimal Control","ROS","Robotics"],"title":"NanoDrone RL Aided MPC","type":"project"},{"authors":null,"categories":null,"content":"This is fully ROS integrated robot, which can be used in various purposes our main use case was to test out multiagent algorithms. We used it to take part in the national level competition, FlipKart Grid 3.0 Robotics challenge 2021.\nI have worked on building the platform and the integrating ROS with the following robot. The localization was done using a Apriltag_ros and a array of cameras. Also worked on implementing autonomously navigating in the environment and computing the optimal path while considering other robots in the arena.\nThe complete package including the controller and the planner can be found at Dot-Bot.\nRobot control The robots control architecture is a state-of-the-art implementation using a microprocessor and a microcontroller along with sensor fusion for position estimation with external cameras for deteciton of apriltags that denote the robot.\nThe exact control architecture is briefly given in the below image which later is elaborated in 3 bulletin points\n Communication: Communication between the robot and the remote PC is done through Networking of multiple machines. The communication between the microprocessor and the Microcontroller is done through UART at a baudrate of 2000000. Pose Estimation: Pose estimation is done through using Encoder and Imu fusion for odometry(i.e., odom to base frame). Then we use and external camera for ground truth (i.e., map to base frame). Controller: We have used a simple velocity based 3 wheel omni drive to control the robot. The omni drive node works at 100 hz on the raspberrypi and the micro controller controls individual motors to trace the given velocity this made it very easy to transfer from the simulation to real world.  The whole implementation of the control architecture can be found at Swarm-bot-hardware.\nSimulation We have setup the whole simulation for these robots as we have modelled the real robot. We have also added the 2DOF droppers that can be seen on top of each robot.\nWe have setup Rviz to visualize the robots both in simulation and hardware. An demo of the robot in gazebo Flipkart grid Challenge The main task was to drop packages using the most optimal path, We had used CBS with minor changes to best suite our problem statement. We also used Tracking PID for tracing these trajectories and making it more general and robust to be used with other algorithms and systems.\nExample of the arena in which it drops the package The robot is now a developmental platform for other multiagent research at Indian Institute of Technology, Varanasi The robot is now about to have minor upgrades for it be used in a more real world use case by addition of lidars and better on board computation.\nA preliminary result of the path planning algorithm with package dropping can be seen below.\n","date":1627776000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627776000,"objectID":"85831394bb8459a4633606754b90b4f9","permalink":"https://hex-plex.github.io/project/dot-bot/","publishdate":"2021-08-01T00:00:00Z","relpermalink":"/project/dot-bot/","section":"project","summary":"Swarm of robots for warehouse management","tags":["MultiAgent","ROS","Embedded System","Control Theory","Navigation Stack","Computer Vision","Robotics"],"title":"Mini Swarm Bot","type":"project"},{"authors":["Somnath Kumar"],"categories":["Robotics","Competetions"],"content":"Flipkart Grid is a national robotics challenge that is organised by Flipkart annually. It is a distinguished event in which 2000+ teams representing different institutes participate from across the nation.\nGrid 3.0 is being organised by Flipkart this year and the problem statement requires a swarm of hardware bots to be built. Here is the link to this year‚Äôs problem statement-Flipkart Grid 3.0 - Robotics Challenge : Problem Statement\n(Building a swarm of bots with active communication for autonomous package sortation with a central monitoring system in an industrial environment.)\n Our team named ‚ÄúNoSignal‚Äù comprising 15 students with expertise across different fields has registered for the event and we are looking forward to ace the competition this year and bring laurels to our institute.\nWe just need your support to do it well!!\n  -- Recieved Rs.51,200 out of Rs.73000   Help us reach there!!.\nSupport Us  Our Voyage so far- We started by forming a team in 2020 to take part in Grid 2.0. It consisted of 3 novice juniors and 3 experienced seniors. The team worked hard and learned a lot of things through the event. The journey included sleepless nights, long brainstorming sessions and a lot of innovation and hard work.\nWe designed a novel hardware and implemented software algorithms to predict the positions and orientations of the gripper to grab various objects. Here are some results from our endeavor -\n Predicting grabbing points for a headphone           a b    Hardware at work in simulation The team, representing our prestigious institute, took part in Grid 2.0 last year and were able to make it to the national finals in our very first attempt at such a competition, among the top 3 teams from all over the nation. From then, it has only motivated us to proceed further and prepare ourselves for the next iteration of Flipkart.. Throughout the year, we have trained our team on various skill sets required for the real world deployment of robotics through various competitions and events. This has made our current team members better mentors and our incoming new members better roboticists. Thus we are now ready to embark upon the next big challenge with a bigger and a better team.\nCurrent Progress and Plan We are planning to solve the problem statement using very modest hardware and our innovative solutions. In this harsh time we are facing great difficulty in fabricating the robots due to lack of funds and collaboration space. For now we were able to solve a genuine amount of the problem statement while having built one prototype that is autonomously controlled by ROS.\n         a b    Our First Prototype  This is a modest hardware consisting of BO motors with encoders, Raspberry pi zero W (For Onboard computation), and a off shell Chassis with caster wheels. We are continuously testing out Mechanisms for Package Dropping.\nSwarm of robots moving around a Warehouse\nEven Before testing out our algorithms we test them on Gazebo (DARPA accepted simulator), And iterate to make better algorithms. We see this technology to scale up in any Industry as we are using State of the Art algorithms for Controlling and Trajectory Planning.\nExpenses Given below is the estimate for building 8 robots with tools at our disposal.\n   Name Quantity Cost Link     2WD chassis 8 499*8 = 3992 Buy 2WD Aluminum Smart Robot Car Chassis Kit Red Online   N20 motors 32 469*24 = 11256 150:1 Micro Metal Gearmotor HP 6V   1300 3S Lipo 8 1000*8 = 8000 \u0026ndash;offline\u0026ndash;   LN298 8 125*16 = 2000 Buy L298N 2A Motor Driver Module Online at the Best Price   Mini Buck 8 60*8 = 480 \u0026ndash;offline\u0026ndash;   Raspberry pi zero w+ microsd card 8 1800*8 = 14400 Buy Raspberry Pi Zero W (Wireless) With In-Built Wifi and Bluetooth   Omni Wheels 38dia 24 24*460 = 11040 \u0026ndash;offline\u0026ndash;   IMU 9 axis 8 415*8 = 3320 Buy 9DOF 3Axis Gyro Accelero and Magnetometer Sensor Module In India   Cameras 4 1900*4 = 7600 HP w200 HD 720p/30 Fps Webcam, Built-in Mic, Plug and Play, Wide-Angle View for Video Calling, Skype, Zoom, Microsoft Teams   Acrylic sheets 2 999* 3 = 2997 Acrylic Sheet 3MM Clear (16x24inch)   Servo motors 16 250* 16 = 4000 Tower Pro MG996R Digital Metal Gear High Torque Servo Motor (180 Degree Rotation)   \u0026ndash; \u0026ndash; \u0026ndash; \u0026ndash;    Total 69085     Overhead Expn. 3915     TOTAL: 73000     Do consider consider contributing :)\nPayment Options  With the generous support of our donors we have reached such a huge milestone.\nRecieved Rs.51,200 out of Rs.73000   Help us reach there!!.\n  -- For now we are taking payments only through UPI, for paying use the qr code or UPI id  Upi ID :     .tooltip { position: relative; display: inline-block; } .tooltip .tooltiptext { visibility: hidden; width: 140px; background-color: #555; color: #fff; text-align: center; border-radius: 6px; padding: 5px; position: absolute; z-index: 1; bottom: 150%; left: 50%; margin-left: -75px; opacity: 0; transition: opacity 0.3s; } .tooltip .tooltiptext::after { content: \"\"; position: absolute; top: 100%; left: 50%; margin-left: -5px; border-width: 5px; border-style: solid; border-color: #555 transparent transparent transparent; } .tooltip:hover .tooltiptext { visibility: visible; opacity: 1; }  -- If you are facing any technical difficulty you can pay the below number through UPI, or you may choose to contact through Phone or Whatsapp. Phone Number : Copy to clipboard    function myFunction() { var copyText = document.getElementById(\"myInput\"); copyText.select(); copyText.setSelectionRange(0, 99999); document.execCommand(\"copy\"); var tooltip = document.getElementById(\"myTooltip\"); tooltip.innerHTML = \"Copied!\"; } function outFunc() { setTimeout(function(){ var tooltip = document.getElementById(\"myTooltip\"); tooltip.innerHTML = \"Copy to clipboard\"; }, 1000); } function myFunction2() { var copyText = document.getElementById(\"myUpi\"); copyText.select(); copyText.setSelectionRange(0, 99999); document.execCommand(\"copy\"); var tooltip = document.getElementById(\"img_f\"); tooltip.innerHTML = ``; } function outFunc2() { setTimeout(function(){ var tooltip = document.getElementById(\"img_f\"); tooltip.innerHTML = ``; }, 1000); }  ","date":1626480000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594944000,"objectID":"dc471eab04de6479fe124a6c89de5550","permalink":"https://hex-plex.github.io/post/fundraiser/","publishdate":"2021-07-17T00:00:00Z","relpermalink":"/post/fundraiser/","section":"post","summary":"Fundraiser for supporting our team to build Swarmbots","tags":["Academic","Funds","Proposal"],"title":"Proposal for Flipkart Grid 3.0","type":"post"},{"authors":null,"categories":null,"content":"This post is a collection of Optimal Control algorithm that I either implemented or Integrated with the quadruped \u0026lsquo;Stochlite\u0026rsquo; at Stochlab, IISc. These are implemented in ROS so that we can deploy them directly on the hardware. My major contribution was to integrate these well established optimal control algorithms with the ROS framework of the Quadruped.\nMajority of the Optimal control do not have significant difference in performance in Hardware as I was unable to test them in many scenarios through the simulators.\nModel Predictive Control Inspired from [1] implemented the convex mpc for the quadruped. along with [2] a whole body impulse Controller which will help to trace the estimated foot forces estimated from the Controller. While the MPC uses an approximate Linear model of the quadruped. The whole body impulse controller considers the Floating base dynamics of the robot, while the MPC uses the Single Rigid body Dynamics. I also implemented a modified version of the State Estimator for the quadruped need for the Algorithms\nEstimated Foot forces from the MPC Output Below are a few clips where the MPC stablizes the torso and attains a\nUsing the MPC on the Hilly terrain, with no prior knowledge of the terrain Using the MPC and WBiC on Rough terrain, with no prior knowledge of the terrain As it can be seen from the above output the quadruped stablizes itself instantaniously as it has no prior knowledge like an heightmap of the world.\nTrajectory optimization We have used TOWR[3] for trajectory optimization, Below is the output from the towr gui, for the quadruped.\nStochlite in TOWR As seen in the above output towr is able to produce feasible trajectories of foot positions and forces for the quadruped in differnt terrains.\nIntegrating towr would require a heightmap of the world which would need an online 3D Mapping of the world using a depth camera which currently was not available on the platform hence limiting the developing towards it.\nBut later I integrate towr, only for Flat ground and ran it at 4 Hz for updating the optimal foot positions. As the rate is too slow and the difference between the state at the start of the optimization and current would be drastically different, I implemented towr to run parallely with estimation of the current state of the robot based on the control input of the previous optimized solution and the dynamics model of the robot solved to fetch the state at a future timestep.\nReinforcement Learning We are further working towards improving the performance of these algorithm by using Reinforcement Learning with formulations to work along side these algorithms and also in tandom with these algorithm.\nReferences [1]Dynamic Locomotion in the MIT Cheetah 3 Through Convex Model-Predictive Control, DOI: 10.1109/IROS.2018.8594448, Jared Di Carlo, Patrick Wensing, Benjamin Katz, Sangbae Kim\n[2]Highly Dynamic Quadruped Locomotion via Whole-Body Impulse Control and Model Predictive Control, Donghyun Kim, Jared Di Carlo, Benjamin Katz, Gerado Bledt, Sangbae Kim\n[3]Gait and Trajectory Optimization for Legged Systems Through Phase-Based End-Effector Parameterization, Alexander W. Winkler, C. Dario Bellicoso, Marco Hutter, jonas Buchli\n","date":1625270400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625270400,"objectID":"ce12422f48ebabb94bf6dbd3ee877649","permalink":"https://hex-plex.github.io/project/optimal-control_quadruped/","publishdate":"2021-07-03T00:00:00Z","relpermalink":"/project/optimal-control_quadruped/","section":"project","summary":"Different control and optimization algorithms on Stochlite, IISc.","tags":["Reinforcement Learning","Optimal Control","ROS","Robotics"],"title":"Optimal control and trajectory optimization for Quadruped","type":"project"},{"authors":["Somnath Kumar","Pratik Chattopadhyay","Lipo Wang"],"categories":null,"content":"","date":1625097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625097600,"objectID":"4b9132ca5e6c55e3df6f9638acba2e7e","permalink":"https://hex-plex.github.io/publication/bgaitrnet/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/bgaitrnet/","section":"publication","summary":"Recent advancements in computational resources and Deep Learning methodologies has significantly benefited development of intelligent vision-based surveillance applications. Gait recognition in the presence of occlusion is one of the challenging research topics in this area, and to date the solutions proposed by researchers lack in robustness and also dependent of several unrealistic constraints. As a result, these cannot be potentially deployed in real-world scenarios. We improve the state-of-the-art by developing novel deep learning-based algorithms to identify the occluded frames in an input sequence and next reconstruct these occluded frames by exploiting the spatiotemporal information present in the gait sequence. The four-stage pipeline adopted in this work consists of key pose mapping, occlusion detection and reconstruction, and finally gait recognition. While the key pose matching phases is done via a Graph sorting algorithm, occlusion detection is carried out in this work by employing a custom built VGG-16 model. Following this, reconstruction of occluded frames is done by fusing the key pose-specific information along with the temporal information present in the gait sequence using a Bi Directional Long Short Time Memory. This occlusion reconstruction model has been trained using synthetically occluded CASIA-B and OU-ISIR data, and the trained model is termed as Bidirectional Gait Reconstruction Network BGait-R-Net. Our approach produces frames that are temporally consistent with the periodic pattern of a gait cycle, while also preserving the body structure, i.e., silhouette-level features at a high resolution. The Pose Energy Features computed from the reconstructed gait cycle has been used as gait signatures to compare against a large set of gallery subjects. Preprint submitted to Neurocomputing September 27, 2021The effectiveness of our approach has been evaluated on the TUM-IITKGP and the synthetically occluded CASIA-B data sets, and encouraging results have been obtained. Comparative analysis with other popular state-of-the-art methods verify the suitability of our approach for potential application in real-life scenarios.","tags":[],"title":"BGaitR-Net: Occluded Gait Sequence reconstruction with temporally constrained model for gait recognition","type":"publication"},{"authors":null,"categories":null,"content":"This is my research project at RoBoReg, on which I have been working for over a year till date since November 2020.\nAbstract Abstraction of policy for Multi Agent to generalize the Swarm Behaviour. Allowing easy scaling up and robustness in task. Learning heirarchially optimal policy facilitates meta learning for multi agent setup, resulting in easier learning another task for the swarm. This saves a lot of train time as the policy takes major ammount of time to learn the complex interaction of these individual agents with each other and the environment. As the distribution of the model for these interaction doesnt tend to change drastically between tasks.\nIntroduction The testing has been done on a custom robot platform named iOTA. Which is a simple 4 Wheel drive on both top and bottom plates and hypotetically capable of docking(All tests are simulations with constraints added by simulator, this is done to reduce the complexity of physics).\nThe whole setup is simulated in PyBullet, and we have made a simple env for our experimental testbed gym-iOTA. There has been on a simpler 2D version of the Env for easier training and debuggin for representation learning of the environment gym-iOTA_2D.\nPipeline Here we have used multiple classical algorithms with learnt methods. The main parts in the algorithm is.\n Localization Clusterring High Level Planning using Policy Obstacle Avoidance Control  Localization Localization is done using detection from multiple cameras, and averaging the position and pose as the estimates where better than just one camera. Then this pose is infused with odometry and imu using an Extended Kalman filter.\nClustering The clustering is done using Kmeans clusters, The main use of clustering is to divide the Swarm into smaller parts for being able to learn quicker while decreasing the complexity of observation. And also making meaningful interactions as the agent is barely affected by an agent outside it\u0026rsquo;s cluster.\nHigh Level Planning The high level planning here refers to estimate goal position of the robot complete a certain task. The high level planning is done using Two policies, The first policy Works on individual cluster estimating parameters of an polygon, while the next estimates the distribution over the polygon and then sampling points off the distribution is taken as the target point for the robot for one action step.\nAs it can be seen one policy is under the heirarchy of the other policy and as policy $\\pi_1$ is updated less frequently compared to $\\pi_2$ The return will not be the same for every action taken by $\\pi_1$. Hierarchical Reinforcement Learning is much suited in this Semi-Markov Decision Process over traditional Reinforcement Learning. This also allows to learn a heirarchically optimal policy that will facilitates meta learning to different tasks.\nThe equation for update for the two policies are given by the following. $$ \\pi_i = \\pi_i + \\alpha*\\delta_i $$ $$ \\delta_1 = V(s_{t-1}) + \\gamma*R_{t} + \u0026hellip; + \\gamma^{\\tau+1}*R_{t+\\tau} - V(s_{t+\\tau})$$ $$ \\delta_2 = V(s_{t-1}) + \\gamma*R_t - V(s_{t})$$\nHere $\\tau$ is the number of time steps $\\pi_2$ steps between consecutive steps of $\\pi_1$\nThe final output of both combined is. Where the estimated polygon is seen in green, and the distribution is seen in orange. And the sampled point is seen in red.\nObstacle Avoidance After the action is taken the main task is to find a path to the target position without colliding into one another. This is done using Potential Field Planning, this was the simplest algorithm for path planning that we could use in pybullet. This could easily be replaced by the nav stack in ROS.\nControl This was done using simple PD control of a 4WD, Later the docking was done using Fixed Constraints in simulator than actuallying designing and simulating a docking mechanism. While our main goal was to work on it when we would work on the hardware. The working wheels switch when the robot is flipped which is sensed using an IMU.\nLimitation After Enumerous reiteration on code, and brainstroming of ideas the project only received limited success. The project was a continual part of learning and implementation of year long journey. There are a few points of failure in the current architecture that I would like to point out.\n Insufficient Observation :- The observation for individual agent is complex for a policy \\pi_2 to learn, and the representation of the cluster is done with insufficient features to policy \\pi_1. Constrained Action Space :- The current action space for both the policy are rather no encouraging to move away from the cluster or move towards a specific direction to complete the task. The architecture for the highlevel planning must be improved to allow motion in and out the cluster. Bugs in the Environment :- The potential field algorithm is notourious for its suboptimal or worse infinite loops at corner cases for given parameters. The control is a bare minimum position control using PD and doesnt model the highly complex and dynamic System, hence the interaction of these robots in tightly packed regions are very bad as they are unable to trace the given trajectories. This is mainly true once the robots are docked.  Apart from these the robot platform, as well as the codebase are robust and modular hence can be used in other applications and in future iterations of the project. This project is result of hardwork of its contributors.\nContributors   Somnath Sendhil Kumar \n Surabhit Gupta\n R Tharun Gowda\n Kritika Bansal\n   Lead,Reinforcement Learning Hardware Design Clustering Path Planning   ","date":1617580800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617580800,"objectID":"76c2d6652d81b90d07efccce5d1c68bd","permalink":"https://hex-plex.github.io/project/modularbot_planner/","publishdate":"2021-04-05T00:00:00Z","relpermalink":"/project/modularbot_planner/","section":"project","summary":"Enabling communication in MultiAgent Reinforcement Learning using Graph.","tags":["MultiAgent","Reinforcement Learning","3D Modelling","Robotics"],"title":"Hierarchical Reinforcement Learning for Swarm of Modular Bot","type":"project"},{"authors":null,"categories":null,"content":"Gait-Occlusion-GAN UnPublished: made public temporally\nOriginal code for the paper \u0026ldquo;BGaitR-Net: Occluded Gait Sequence reconstruction with temporally constrained model for gait recognition\u0026rdquo; under Prof. Pratik Chattopadhyay.\nThis work proposes simple BiDirectional Filtering of the latent vectors of The silhouettes. TimeSeries Data of the latent space is been filter for reconstruction using a simple Bi-LSTM trained with A sophisticated method proposed in the paper. The Conversion of the Spatio Data to latent space was done using a conditional Variational AutoEncoder. We have used a 3 Datasets : for training 2 namely, CASIA-B, OU-ISIR large population, and testing 1 namely, TumIITKGP.\nA conditional GAN based approach is also been presented in code\nProposed approach We have used a Model based approach for feature extraction using Temporally constrained Kmeans Clustering and Short Path in a Weighted Graph for assigning Keypose for the Sequence even in case of Occlusion. This achieved substantially better results\nPropoesed Approach Model Architecture Model Architecture - 2 Results Visual inspection of Reconstruction for a sequence with over 73 occlusion. (a) Input Sequence (b) Reconstructed Sequence (c) Ground Truth Successfully able to Reconstruct 22 Frames from just 8 Frames with a Dice score 0.98\nCMC Accuracy of Gait Recognition for TUM-IITKGP Dataset ","date":1614902400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1614902400,"objectID":"064b097ca5d2ab75d26f2d3863433160","permalink":"https://hex-plex.github.io/project/gait-occlusion-gan/","publishdate":"2021-03-05T00:00:00Z","relpermalink":"/project/gait-occlusion-gan/","section":"project","summary":"Reconstruction Gait sequence for gait recognition","tags":["Computer Vision"],"title":"Gait-Occlusion-Reconstrution","type":"project"},{"authors":["Somnath Kumar","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It\u0026rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.   Get Started  üëâ Create a new site üìö Personalize your site üí¨ Chat with the Wowchemy community or Hugo community üê¶ Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy üí° Request a feature or report a bug for Wowchemy ‚¨ÜÔ∏è Updating Wowchemy? View the Update Guide and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n‚ù§Ô∏è Click here to become a sponsor and help support Wowchemy\u0026rsquo;s future ‚ù§Ô∏è As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features ü¶Ñ‚ú®\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, ‰∏≠Êñá, and Portugu√™s Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://hex-plex.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome üëã We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","ÂºÄÊ∫ê"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":null,"categories":null,"content":"Abstract This Repository contains the hardware designs of the Two Wheeled ROS enabled robot capable of self - balancing and also able to run SLAM and Localize itself with just Odometry, Encoders on the wheel and the Camera used with Depth Maps[1] to get a partially accurate Depth information of the surronding. This is partially inspired from the Turtlebot[2] but it must be kept in mind the algorithm has be able to model the two wheeled bot to even account for its self balancing action which was solved using accurate System Modelling[3].\nDesign The above is the bot in all its glory, I had built The Hardware before running simulations and testing out its stability as its quite an symmetrical and simple design. This surely resembles turtlebot but has a few changes. Basically the idea was to have a worthy replacement for a turtlebot to test out all the mapping and planning algorithms on it.\n After the construction it was quite easy to make a 3D design for the simulators. My Weapon of choice Phobos[4] and Blender.\nBelow is a simple design of the bot in blender.\nWith some Phobos magics üéâüéâ\nWe can set the parameters required for generating URDF of the bot.\nExporting it just makes the work run naturally with Gazebo, PyBullet and any other Simulator of choice. The below is a simple PID control on the Pitch of the Bot.\nYou can get the same output running the following in the terminal.\ngit clone https://github.com/hex-plex/PauciBot-Hardware.git cd PauciBot-Hardware python scripts/trial.py  Under-Development The Main objective was that I wanted to explore the Difficulties faced when taking the Project from simulation to reality and vice versa. The Main tool is ROS as its a well established community with most useful tools opensourced for all. Hence I would like to release The bot with a ROS package. I have been currently working on the same for the past few months.\nHope to see you there soon. : )\nComponents The whole body is made of Ply wood and solid wood. And the wheels are just off the shelf RC car wheels with a 11.1 V LiPo battery.\n  Arduino Mega 2560   I have used this for controlling the motor drivers and getting a Odometry and runnning a baseline self balancing algorithm.\n  Nvidia Jetson Nano 4GB   This is the ROS hardware Node on the Robot which communicates to a master on the localhost using UDP protocol. This is also used to give the neccesary computational power for onboard Computer Vision algorithms.   MPU9250   Simple sensor for Odometry.\n  L298 Motor Driver   Motor driver for controlling 2 Motors\n  LM2596S Buck   For regulating voltage comming from the battery.\n  Logitech C290   This is a high quality webcam that can be easily used for capturing images at incredibly high resolution and quality. References [1] Unsupervised Learning of Depth and Ego-Motion from Monocular Video Using 3D Geometric Constraints. Reza Mahjourian, Martin Wicke, Anelia Angelova [link]\n[2] Turtlebot is a ROS standard platform robot. [link]\n[3] A Tutorial on Modelling and Control of Two- Wheeled Self-Balancing Robot with Stepper Motor [link]\n[4] Phobos is an add-on for Blender. [link]\n","date":1606780800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606780800,"objectID":"571b82eeb8a36223cf836f7f745d14a8","permalink":"https://hex-plex.github.io/project/paucibot/","publishdate":"2020-12-01T00:00:00Z","relpermalink":"/project/paucibot/","section":"project","summary":"Working around the 2 wheels.","tags":["ROS","Computer Vision","Embedded Systems","Linux","3D Modelling","Robotics"],"title":"PauciBot","type":"project"},{"authors":null,"categories":null,"content":"This is an experimentation to learn about Swarm Robotics with help of MultiAgent Reinforcement learning. We have used KiloBot as a platform as these are very simple in the actions space and have very high degree of symmetry. The Main inspiration of this project is this paper[1]\nSetting Up git clone https://github.com/hex-plex/KiloBot-MultiAgent-RL cd KiloBot-MultiAgent-RL pip install --upgrade absl-python \\ tensorflow \\ gym \\ opencv-python \\ tensorflow_probability \\ keras \\ pygame pip install -e gym-kiloBot  This should fetch and install the basics packages needed and should install the environment\nSample of environment These envs are running on a constant Dummy-actions!!\n   Env with Graph Objective Env with Localization Objective          Usage python env-test.py ## This will help you check the functionality of the environement and should give the sample code to understand the apis as well. python model-train.py \\ --headless=True \\ ## for headless training default False --objective=\u0026quot;localization\u0026quot; \\ ## defines the objective default is graph --modules=10 \\ ## This defines the no of modules to be initialized default 10 --time_steps=100000 \\ ## This is the total no of steps the agent will take while learning --histRange=10 \\ ## This is the no of mu values for the histograms --logdir=\u0026quot;logs\u0026quot; \\ ## This specifies the log location for TensorBoard --checkpoints=\u0026quot;checkpoints\u0026quot; ## This is for defining the location where the model is to be saved --load_checkpoint=\u0026quot;checkpoints/iter-500\u0026quot; ## This loads the specified iteration python play-model.py \\ ## This should load trained weights and show the performance --load_checkpoint=\u0026quot;checkpoints/graphs/10\u0026quot; \\ ## loads this model --modules=10 \\ ## no of modules in the env --objective=\u0026quot;localization\u0026quot; \\ ## Sets the objective function --time_steps=10000 \\ ## No of iterations to be run --histRange=10 ## Same def as above  Results After a exhaustive amount of training on varies combinations of no_of_modules and task in hand I have obtained results of the following algorithm for these parameters. I have used [5, 10, 15, 20, 25, 50] number of modules to carryout the tests.\nOne may find the Tensorboard log files here:\nlog_kilobot [Drive Link] (403MB)\nand the Model Weights for each parameters here:\ncheckpoint_kilobot [Drive Link] (63.3MB)\nGraph Problem The below table is based on the number of modules used but for result tabulation I am considering [5, 10, 20, 50] number of modules. To infer many insights of the algorithm in hand.\nPlease click on the image to zoom in\n   Model Trained on \\ Model Run on 10 20 50     10      20 -  -   50 - -      The policies trained on 20 and 50 module system is completely random in sense it just goes forward. We can see clearly the policy trained with 10 modules have yield a very good amount of coordination between each other that is the critic model taking in the input image of the system is able to specify the bots and guide them, Hence a very good amount of generalization is found when we use this model with system with different number of modules as can be seen with the 20 module system but the non stationarity of a higher order system makes it complex for the critic to reward or give baseline to the actor, As the\n The order of the reward changes drastically. The Reading from the histogram becomes Muddy. The correlation of a reward to action of a single agent reduces drastically.   Hence the Model trained with 10 modules is not able to generalize to the 50 module system, BUT It looks more promising than the policy trained for the 50 module system itself, hence a curiculum learning based approach seems promising to solve such a transfer learning problem.\nPlots for Training with 10 modules    Actor Loss Critic Loss Reward            For 5 modules The system can\u0026rsquo;t comphensate for the negetive reward got by using fuel as the reward got for graphing is much smaller in order than it that it chooses to be stagnent.  Localization Problem Here the task was much easier but the training didnt yield any satisfactory result as.\n there were a lot of non stationarities and the fact the system was modelled based on a fashion which couldn\u0026rsquo;t extend more than a small system of at best 10 modules [1]. And the fact that the reward of localization couldnt exceed the negetive reward for moving the bot that is the bots choose to stand still to save fuel over exploring in most of the senarios.  Below are few runs with [10, 25] Number of modules.\n   Localization trained for small n(=10) Localization trained for big n(=25)          Here it is clearly visible that because of randomness and the fact more number of can cover a larger space of the system exploration is much easier than being greedy to stay at a point and save fuel.\nAcknowledgment To Center for Computing and Information Services, IIT (BHU) varanasi to provide the computational power, i.e., The Super Computer on which I was able to train for over 10 Million Timesteps for about 1.5 months.\nFor any other query feel free to reachout.\nReferences [1] Guided Deep Reinforcement Learning for Swarm Systems [arXiv:1709.06011v1] [cs.MA] 18 Sep 2017\n","date":1599091200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599091200,"objectID":"e8443239b3870f8de2b835cb85153c56","permalink":"https://hex-plex.github.io/project/kilobot-multiagentrl/","publishdate":"2020-09-03T00:00:00Z","relpermalink":"/project/kilobot-multiagentrl/","section":"project","summary":"Deep MultiAgent Reinforcement Learning on \"KiloBot\" by Havard University","tags":["Reinforcement Learning","MultiAgent Systems","Deep Learning","OpenAI gym","PyGame","Robotics"],"title":"KiloBot MultiAgent Reinforcement Learning","type":"project"},{"authors":null,"categories":null,"content":"RL-based learning for a robotic arm to imitate a given hand in a image feed with handOfJustice as our environment\nTo Setup pip install gym-handOfJustice  else\ngit clone https://github.com/hex-plex/gym-handOfJustice cd gym-handOfJustice pip install -e .  To Train we used Actor Critic technique to update the a CNN examples are RL-train.py and RL-Test.py\n In RL-train we have built the Actor and the critic model using tensorflow In RL-Test we have used stable-baselines SAC model with LnCnnpolicy policy Dataset which we used consisted of 50,000 images that meant content for 50,000 episodes. to use the same it could be downloaded from the drive link \u0026mdash;-or\u0026mdash;-  wget --no-check-certificate -r 'https://docs.google.com/uc?export=download\u0026amp;id=1YeJecxl8LDR_r3JAWfSbDP4X_klVQfrO' -O dataset.7z pacman -Sy p7zip-full # Or any package manager you like 7z e dataset.7z  Training Metrics The training was completed( only on ~50% of the dataset ) over a span 36 days. Special thanks to Center for Computing and Information Services, IIT (BHU) varanasi to provide the computational power i.e., the Compute Cluster. It ran for about 20,960 episodes making upto 20 Million steps. the following are the log of all the metrics.\n   Actor Loss Critic Loss Reward Cummulative Reward            These results may look decent but we should keep in mind that what i have tried to do is a end to end model for a very complex and really having a few layers after a mobile net is surely not sufficient for learning the forward kinematics of a robotic arm and being able to estimate the pose of the arm in the image.\nOutput These are the best result after training over a limited amount of time\nNote we have used clips from different versions of trained model and environment so there is a edit on these clips that in the gym-handOfJustice==0.0.6 a flip in the environment was added to make feel of the robotic hand more mirror like which can be spotted in the gif files\nThe End Thats all from our side\n The Team  Somnath Sendhil Kumar \n Yash Garg\n L N Saaswath\n Atul Kumar\n  ","date":1591401600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591401600,"objectID":"4a630a431e34ba2cbd5f76e80ff1242e","permalink":"https://hex-plex.github.io/project/hand-imitation/","publishdate":"2020-06-06T00:00:00Z","relpermalink":"/project/hand-imitation/","section":"project","summary":"Reinforcement Learning for an Imitating Robotic Arm.","tags":["Computer Vision","PyBullet","Reinforcement Learning","OpenAI gym","3D Modelling","Robotics"],"title":"Hand Imitation","type":"project"},{"authors":null,"categories":null,"content":"I have tried baking a rudimentary RL environment and a agent recipe to learn more about the eco-system. I have made pong.py a environment which one can host either locally (localhost) or on 0.0.0.0 (LAN).Allowing to communicate to mainmodel.py which has to be connected to the same host and the same port.  I have used a simple socket connection to transfer data rather than a flask/django backend as they are based on it giving a advantage of speed of communication.  both the scripts have debug mode which allows one to see in which state or stage they are in. \nOutput  The one on the left is a RL agent trained for 3 days and the one on right is a hardcoded AI. This is noticible the they nearly have the same level of skills. Requirements This requires only few basic libraries it only runs on python3, rather a small update can make it compatible with python2. The libraries\npickle numpy cv2 pygame # Below are mostly available preinstalled in any python distribution socket BytesIO # from io in python3 or directly in python2 _thread # for python 3 and thread in python2  Which are quite rudimentary and neccessary part of the code.\nMultithreading Here I have use many threads to assure that no data is missed while any other calculation or process is running on the main thread as there might be some unwanted lag between inputs.Also another thread on mainmodel exists which take inputs from the user for pausing and resuming its learning session\nSockets I have used sockets to send data between scripts rather than using a instance of model and the pong env on the same script well that would work just fine (or better removing all the lag of communication) , but my goal was to make it more appealing and to make me learn more real life skills that is if I train a agent with raspberry pi ( or any other weaker mobile device for that matter ) as a part of the environment or in the environment a more viable option than running both simulation and the RL agent would be to do the computation and send in actions to it. This also gave me a good understanding about data compression and network security ,though here there is none used as it just accepts the first connection to the env.   with the use of socket one could manually control the environment with keyboard and also have a RL agent learning (half - Duplex).\nDemo To launch the env with mostly default values just running pong.py directly would start the server with default configs. Its always recommended to use its instance, apply your configuration you want it to run and start the server.\nfrom pong import Pong env = Pong( levelodiff=1, ## This is the level of the inbuilt AI that plays against you. ## Set it to 4 and chill out (really try it!!) the scale is 1-3 debug=False, ## If set to True it will print the stage the environment is in and info the data inputs and outputs render=False, ## It would render the image that is sent to the model, This slows down the process so not a good idea to use it. server=True, ## This is to set server mode on , if set false the environment will be no different from ordinary pong game. host=\u0026quot;\u0026quot;, ## This is to specify where you want to host it, \u0026quot;\u0026quot; maps to local host \u0026quot;0.0.0.0\u0026quot; doesnt really map ## to your ip address yet port=12345 ## This your port no. of the connection. ) ## This is to just initiate the environment env.start()## This starts the env ie., hosts itself as per the given parameter and waits for a connection in async while continuing the game  To launch the RL agent running the mainmodel.py directly will run it in default config.  To customize to your config import and create an instance and run the client. \nfrom mainmodel import PolicyGradient ## This uses two hidden layer to out-put 2 probabilities agent = PolicyGradient( resume=False, ## This is usefull to continue training from previos checkpoint. render=True, ## This will render the image got through the socket,useful if model is in another computer host=None, ## If the value is None it trys to find a localhost , else specific host is to be provided as a str port=12345, ## default value is 12345 set is as required. hiddenUnits=250, ## This no of hiddenUnits in first layer depending on the dimension of input. batch_size=10, ## This is to set batch size for batch reiforcement learning rather than using single episode. learningRate=1e-3, ## This is to set learning rate gamma=0.99, ## This is to set gamma or the discount decayRate=0.99 ## This is decayRate for RMSprop ) ## This creates an instance of PolicyGradient algorithm as a client_socket agent.start() ## This starts the agent ie., connects to the server and communicates and learns from its experience.  Running them should launch the env and agent would start leaning. There is a propriety control in mainmodel.py which takes input in its terminal as\n \u0026lsquo;p\u0026rsquo; ==\u0026gt; Pausing/Resuming the training process \u0026lsquo;q\u0026rsquo; ==\u0026gt; Quit the training process , But this makes a Checkpoint as interrupt.p \u0026lsquo;ping\u0026rsquo; ==\u0026gt; This pings the pong server 10 times and returns the average time it took to send and receive packets. else with a better score of agent, the model is saved continuosly as save.p.  Fast-training I have experimented the whole thing with networking sockets and asynchronous methods limiting the training process to human level speed for which I have uploaded the pong-fast-train.tar.gz\ntar -xvzf pong-fast-train.tar.gz cd pong-fast python mainmodel.py mv save.p ../save.p  So this should train the model and save it into the main directory this should load the trained model in the main algo.\n","date":1588723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588723200,"objectID":"9b914e97eb222fec53f7e061f664cf30","permalink":"https://hex-plex.github.io/project/pong-reinforcementlearning/","publishdate":"2020-05-06T00:00:00Z","relpermalink":"/project/pong-reinforcementlearning/","section":"project","summary":"Implementation of Policy Gradient on self made Pong game.","tags":["Computer Vision","PyGame","Reinforcement Learning","Video Game"],"title":"Pong Reinforcement Learning","type":"project"},{"authors":null,"categories":null,"content":"Bored in the quarantine period, revisiting my old video games with light gun inspired an idea of light gun with a LCD display , I went on to build it mainly as a android package as it would be more accessable to anyone. Then ended up using a Raspberry Pi as a standalone device to enable it\u0026rsquo;s use accross many platforms and devices.\nThe Explanation for the working can be found in EXPLANATION.md\nGlimpse: This is the glimpse of the prototype made with Raspberry pi on a toy gun with all the number-munching done on the Raspberry and transmites messages to the local server through bluetooth. The previous method of running the proccessing and the actions is documented in Win-Py directory.\n \nThis is a prototype of the light gun with a camera module attached onto a toy-gun and with a Raspberry pi 3 b+ (unneccessary I know) and a 7.4 V li-ion battery, regulated with a buck converter to which two switches are connected on the Raspi's interrupt pins.\n   This is the display setup with 4 IR-LEDs attached to the corners of the display which makes it very easy for detection in a wide range of lighting conditions. And after Installation the main code using Raspi version or Local version, continue using it according to the guide lines for the same which is present in their respective folders itself.\nThe Modules then should create a virtual mouse and start following the edge vector of the camera module. The following is a demonstration of it in action\u0026hellip;. (üòÖ coming up shortly, as I am fixing few deviation errors.)\nDemo Link\nContribution Any kind of Contribution is always welcomed. The rules for any Contribution for now is Non existent as I am the only one working on it and I have not really structurized the project so well as mostly in its prototyping stage, So its not possible to do a lot(Anyways feel free to report any errors or bugs üòÑ ), Any Idea for a better implementation is also welcomed.\nReference:  This is for getting R and t matrix [link] This is for adjusting focal length (approximation) [link] This is for getting accurate intrensic matrix [link] Cmake Bluez Raspberry pi interupts Asynchronous coding  ","date":1585785600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585785600,"objectID":"c2bf5bcb801b53b6b41c8c63fb5c6ec8","permalink":"https://hex-plex.github.io/project/light-gun/","publishdate":"2020-04-02T00:00:00Z","relpermalink":"/project/light-gun/","section":"project","summary":"Revival of our beloved video game with Computer Vision.","tags":["Computer Vision","Embedded Systems","Linux","Raspberry Pi","3D Modelling"],"title":"Light Gun","type":"project"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://hex-plex.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]